View(movies)
genre_most_popular_matrix <- genre_most_popular_matrix[1:10]
View(genre_most_popular_matrix)
genre_highly_rated_matrix <- genre_highly_rated_matrix[1:10]
View(genre_highly_rated_matrix)
t(genre_highly_rated_matrix)
genre_highly_rated_matrix <- t(genre_highly_rated_matrix)
genre_most_popular_matrix <- t(genre_most_popular_matrix)
genre_highly_rated_matrix <- as.data.frame(genre_highly_rated_matrix)
genre_most_popular_matrix <- as.data.frame(genre_most_popular_matrix)
genre_highly_rated_matrix$Action
colnames(genre_most_popular_matrix)
genre_list <- colnames(genre_most_popular_matrix)
View(genre_highly_rated_matrix)
View(genre_most_popular_matrix)
View(genre_highly_rated_matrix)
View(genre_most_popular_matrix)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
library(shiny)
library(shinydashboard)
library(stringr)
get_user_ratings = function(value_list) {
dat = data.table(MovieID = sapply(strsplit(names(value_list), "_"),
function(x) ifelse(length(x) > 1, x[[2]], NA)),
Rating = unlist(as.character(value_list)))
dat = dat[!is.null(Rating) & !is.na(MovieID)]
dat[Rating == " ", Rating := 0]
dat[, ':=' (MovieID = as.numeric(MovieID), Rating = as.numeric(Rating))]
dat = dat[Rating > 0]
}
# read in data
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
movies$MovieID <- 1:nrow(movies)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
head(test)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp_sys1 = as.data.frame(tstrsplit(genres[,1], '[|]', type.convert=TRUE), stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
# read in data
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
movies$MovieID <- 1:nrow(movies)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
head(test)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp_sys1 = as.data.frame(tstrsplit(genres[,1], '[|]', type.convert=TRUE), stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp_sys1)){
genre_matrix[i,genre_list %in% tmp_sys1[i,]]=1
}
colnames(genre_matrix) = genre_list
rownames(genre_matrix) = movies$MovieID
remove("tmp_sys1", "genres")
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp_sys1 = data.frame(i, j, x, stringsAsFactors = T)
Rmat_sys1 = sparseMatrix(as.integer(tmp_sys1$i), as.integer(tmp_sys1$j), x = tmp_sys1$x)
rownames(Rmat_sys1) = levels(tmp_sys1$i)
colnames(Rmat_sys1) = levels(tmp_sys1$j)
Rmat_sys1 = new('realRatingMatrix', data = Rmat_sys1)
movieAvgRat  = colMeans(as(Rmat_sys1, 'matrix'), na.rm = TRUE)
genre_highly_rated_matrix = matrix(NA, 18, length(unique(ratings$MovieID)))
rownames(genre_highly_rated_matrix) = genre_list
Rmat_sys1_Cols  = strtoi(strip(colnames(Rmat_sys1), char="m"))
for(i in 1:18) {
tmp_sys1 = data.frame(id = movies$MovieID[genre_matrix[,i] == 1], rat = 1:length(movies$MovieID[genre_matrix[,i] == 1]))
tmp_sys1[,2] =NA
tmp2_sys1 = movieAvgRat[Rmat_sys1_Cols %in% movies$MovieID[genre_matrix[,i] == 1]]
for(j in tmp_sys1$id){
if(!is.na(j)){
tmp_sys1[which(tmp_sys1$id == j),2] = tmp2_sys1[paste0('m',j)]
}
}
tmp_sys1 = tmp_sys1[order(tmp_sys1$rat,decreasing = TRUE),]
print(i)
for(k in 1:dim(tmp_sys1)[1]){
if(!is.na(tmp_sys1[k,2])){
genre_highly_rated_matrix[i,k] = tmp_sys1[k,1]
}
}
}
temp = as(Rmat_sys1, 'matrix')
temp[which(temp < 3)] = NA
temp[which(temp >= 3)] = 1
moviePopCount = colSums(temp, na.rm = TRUE)
genre_most_popular_matrix = matrix(NA, 18, length(unique(ratings$MovieID)))
rownames(genre_most_popular_matrix) = genre_list
for(i in 1:18) {
tmp_sys1 = data.frame(id = movies$MovieID[genre_matrix[,i] == 1], rat = 1:length(movies$MovieID[genre_matrix[,i] == 1]))
tmp_sys1[,2] =NA
tmp2_sys1 = moviePopCount[Rmat_sys1_Cols %in% movies$MovieID[genre_matrix[,i] == 1]]
for(j in tmp_sys1$id){
if(!is.na(j)){
tmp_sys1[which(tmp_sys1$id == j),2] = tmp2_sys1[paste0('m',j)]
}
}
tmp_sys1 = tmp_sys1[order(tmp_sys1$rat,decreasing = TRUE),]
print(i)
for(k in 1:dim(tmp_sys1)[1]){
if(!is.na(tmp_sys1[k,2])){
genre_most_popular_matrix[i,k] = tmp_sys1[k,1]
}
}
}
# Convert to dataframe
genre_highly_rated_matrix <- as.data.frame(genre_highly_rated_matrix)
genre_most_popular_matrix <- as.data.frame(genre_most_popular_matrix)
View(genre_highly_rated_matrix)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
deployApp()
library(rsconnect)
deployApp()
deployApp()
rm(Rmat)
deployApp()
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
library(shinydashboard)
library(stringr)
get_user_ratings = function(value_list) {
dat = data.table(MovieID = sapply(strsplit(names(value_list), "_"),
function(x) ifelse(length(x) > 1, x[[2]], NA)),
Rating = unlist(as.character(value_list)))
dat = dat[!is.null(Rating) & !is.na(MovieID)]
dat[Rating == " ", Rating := 0]
dat[, ':=' (MovieID = as.numeric(MovieID), Rating = as.numeric(Rating))]
dat = dat[Rating > 0]
}
# read in data
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
movies$MovieID <- 1:nrow(movies)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
rm(Rmat)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp_sys1 = as.data.frame(tstrsplit(genres[,1], '[|]', type.convert=TRUE), stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp_sys1)){
genre_matrix[i,genre_list %in% tmp_sys1[i,]]=1
}
colnames(genre_matrix) = genre_list
rownames(genre_matrix) = movies$MovieID
remove("tmp_sys1", "genres")
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp_sys1 = data.frame(i, j, x, stringsAsFactors = T)
Rmat_sys1 = sparseMatrix(as.integer(tmp_sys1$i), as.integer(tmp_sys1$j), x = tmp_sys1$x)
rownames(Rmat_sys1) = levels(tmp_sys1$i)
colnames(Rmat_sys1) = levels(tmp_sys1$j)
Rmat_sys1 = new('realRatingMatrix', data = Rmat_sys1)
movieAvgRat  = colMeans(as(Rmat_sys1, 'matrix'), na.rm = TRUE)
genre_highly_rated_matrix = matrix(NA, 18, length(unique(ratings$MovieID)))
rownames(genre_highly_rated_matrix) = genre_list
Rmat_sys1_Cols  = strtoi(strip(colnames(Rmat_sys1), char="m"))
for(i in 1:18) {
tmp_sys1 = data.frame(id = movies$MovieID[genre_matrix[,i] == 1], rat = 1:length(movies$MovieID[genre_matrix[,i] == 1]))
tmp_sys1[,2] =NA
tmp2_sys1 = movieAvgRat[Rmat_sys1_Cols %in% movies$MovieID[genre_matrix[,i] == 1]]
for(j in tmp_sys1$id){
if(!is.na(j)){
tmp_sys1[which(tmp_sys1$id == j),2] = tmp2_sys1[paste0('m',j)]
}
}
tmp_sys1 = tmp_sys1[order(tmp_sys1$rat,decreasing = TRUE),]
print(i)
for(k in 1:dim(tmp_sys1)[1]){
if(!is.na(tmp_sys1[k,2])){
genre_highly_rated_matrix[i,k] = tmp_sys1[k,1]
}
}
}
rm(Rmat_sys1,train.id)
# Convert to dataframe
genre_highly_rated_matrix <- as.data.frame(genre_highly_rated_matrix)
# genre_most_popular_matrix <- genre_most_popular_matrix[1:10]
genre_highly_rated_matrix <- genre_highly_rated_matrix[1:10]
genre_highly_rated_matrix <- t(genre_highly_rated_matrix)
genre_highly_rated_matrix <- as.data.frame(genre_highly_rated_matrix)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
library(shinydashboard)
library(stringr)
get_user_ratings = function(value_list) {
dat = data.table(MovieID = sapply(strsplit(names(value_list), "_"),
function(x) ifelse(length(x) > 1, x[[2]], NA)),
Rating = unlist(as.character(value_list)))
dat = dat[!is.null(Rating) & !is.na(MovieID)]
dat[Rating == " ", Rating := 0]
dat[, ':=' (MovieID = as.numeric(MovieID), Rating = as.numeric(Rating))]
dat = dat[Rating > 0]
}
# read in data
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
movies$MovieID <- 1:nrow(movies)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
rm(Rmat)
genres = as.data.frame(movies$Genres, stringsAsFactors=FALSE)
tmp_sys1 = as.data.frame(tstrsplit(genres[,1], '[|]', type.convert=TRUE), stringsAsFactors=FALSE)
genre_list = c("Action", "Adventure", "Animation",
"Children's", "Comedy", "Crime",
"Documentary", "Drama", "Fantasy",
"Film-Noir", "Horror", "Musical",
"Mystery", "Romance", "Sci-Fi",
"Thriller", "War", "Western")
m = length(genre_list)
genre_matrix = matrix(0, nrow(movies), length(genre_list))
for(i in 1:nrow(tmp_sys1)){
genre_matrix[i,genre_list %in% tmp_sys1[i,]]=1
}
colnames(genre_matrix) = genre_list
rownames(genre_matrix) = movies$MovieID
remove("tmp_sys1", "genres")
i = paste0('u', ratings$UserID)
j = paste0('m', ratings$MovieID)
x = ratings$Rating
tmp_sys1 = data.frame(i, j, x, stringsAsFactors = T)
Rmat_sys1 = sparseMatrix(as.integer(tmp_sys1$i), as.integer(tmp_sys1$j), x = tmp_sys1$x)
rownames(Rmat_sys1) = levels(tmp_sys1$i)
colnames(Rmat_sys1) = levels(tmp_sys1$j)
Rmat_sys1 = new('realRatingMatrix', data = Rmat_sys1)
movieAvgRat  = colMeans(as(Rmat_sys1, 'matrix'), na.rm = TRUE)
genre_highly_rated_matrix = matrix(NA, 18, length(unique(ratings$MovieID)))
rownames(genre_highly_rated_matrix) = genre_list
Rmat_sys1_Cols  = strtoi(strip(colnames(Rmat_sys1), char="m"))
for(i in 1:18) {
tmp_sys1 = data.frame(id = movies$MovieID[genre_matrix[,i] == 1], rat = 1:length(movies$MovieID[genre_matrix[,i] == 1]))
tmp_sys1[,2] =NA
tmp2_sys1 = movieAvgRat[Rmat_sys1_Cols %in% movies$MovieID[genre_matrix[,i] == 1]]
for(j in tmp_sys1$id){
if(!is.na(j)){
tmp_sys1[which(tmp_sys1$id == j),2] = tmp2_sys1[paste0('m',j)]
}
}
tmp_sys1 = tmp_sys1[order(tmp_sys1$rat,decreasing = TRUE),]
print(i)
for(k in 1:dim(tmp_sys1)[1]){
if(!is.na(tmp_sys1[k,2])){
genre_highly_rated_matrix[i,k] = tmp_sys1[k,1]
}
}
}
rm(Rmat_sys1,train.id)
temp = as(Rmat_sys1, 'matrix')
temp[which(temp < 3)] = NA
temp[which(temp >= 3)] = 1
moviePopCount = colSums(temp, na.rm = TRUE)
genre_most_popular_matrix = matrix(NA, 18, length(unique(ratings$MovieID)))
rownames(genre_most_popular_matrix) = genre_list
for(i in 1:18) {
tmp_sys1 = data.frame(id = movies$MovieID[genre_matrix[,i] == 1], rat = 1:length(movies$MovieID[genre_matrix[,i] == 1]))
tmp_sys1[,2] =NA
tmp2_sys1 = moviePopCount[Rmat_sys1_Cols %in% movies$MovieID[genre_matrix[,i] == 1]]
for(j in tmp_sys1$id){
if(!is.na(j)){
tmp_sys1[which(tmp_sys1$id == j),2] = tmp2_sys1[paste0('m',j)]
}
}
tmp_sys1 = tmp_sys1[order(tmp_sys1$rat,decreasing = TRUE),]
print(i)
for(k in 1:dim(tmp_sys1)[1]){
if(!is.na(tmp_sys1[k,2])){
genre_most_popular_matrix[i,k] = tmp_sys1[k,1]
}
}
}
# Convert to dataframe
genre_highly_rated_matrix <- as.data.frame(genre_highly_rated_matrix)
genre_most_popular_matrix <- as.data.frame(genre_most_popular_matrix)
genre_most_popular_matrix <- genre_most_popular_matrix[1:10]
genre_highly_rated_matrix <- genre_highly_rated_matrix[1:10]
genre_highly_rated_matrix <- t(genre_highly_rated_matrix)
genre_most_popular_matrix <- t(genre_most_popular_matrix)
genre_highly_rated_matrix <- as.data.frame(genre_highly_rated_matrix)
genre_most_popular_matrix <- as.data.frame(genre_most_popular_matrix)
deployApp()
View(genre_highly_rated_matrix)
View(genre_most_popular_matrix)
write.csv(genre_highly_rated_matrix,"HR.csv")
write.csv(genre_most_popular_matrix,"PP.csv")
genre_highly_rated_matrix <- read.csv("HR.csv")
View(genre_highly_rated_matrix)
genre_highly_rated_matrix <- read.csv("HR.csv",row.names = T)
View(genre_highly_rated_matrix)
genre_highly_rated_matrix <- read.csv("HR.csv",stringsAsFactors =  F )
View(genre_highly_rated_matrix)
genre_highly_rated_matrix <- read.csv("HR.csv",stringsAsFactors =  T )
View(genre_highly_rated_matrix)
genre_highly_rated_matrix <- read.csv("HR.csv",row.names =  1 )
View(genre_highly_rated_matrix)
View(genre_most_popular_matrix)
maa <- read.csv("PP.csv",row.names =  1 )
View(maa)
View(genre_most_popular_matrix)
colnames(genre_highly_rated_matrix)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
deployApp()
