shiny::runApp('Downloads')
install.packages("XLConnect")
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
if (!require("pacman")) install.packages("pacman")
msg.out <- capture.output( suppressMessages( library(pacman) ) )
if (p_isinstalled("shiny") == FALSE) install.packages("shiny")
if (p_isinstalled("XLConnect") == F)install.packages("XLConnect")
library(shiny)
library(XLConnect)
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
mt_cars
mtcars
mtcars %>% group_by(mpg) %>% count(cyl)
library(dplyr)
install.packages("dplyr")
mtcars %>% group_by(mpg) %>% count(cyl)
library(dplyr)
mtcars %>% group_by(mpg) %>% count(cyl)
mtcars %>% group_by(mpg) %>% count(cyl)
mtcars %>% group_by(mpg)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
mtcars
mtcars %>% group_by(mpg)
library(zeallot)
install.packages("zeallot")
library(zeallot)
mtcars %>% group_by(mpg)
mtcars %>% group_by(mpg)
mtcars %>% group_by(cyl)
install.packages(c("dplyr", "tidyselect"))
mtcars %>% group_by(cyl)
library(dplyr)
mtcars %>% group_by(cyl)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
View(df)
mtcars %>% group_by(cyl)
library(dplyr)
mtcars %>% group_by(cyl)
install.packages("dplyr")
library(dplyr)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
install.packages("backports")
library(backports)
mtcars %>% group_by(mpg)
install.packages("backports")
library(backports)
mtcars %>% group_by(mpg)
install.packages("broom")
install.packages("broom")
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
R.version.string
updateR()
installr: install.packages("installr")
install.packages("installr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
mtcars %>% group_by(mpg)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
install.packages("bdh")
library(pdh)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
library(bdh)
install.packages("Rblpapi")
library(Rblpapi)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
install.packages("Rblapi")
library(Rblpapi)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
??bdh
bdp(c("ESA Index", "SPY US Equity"), c("PX_LAST", "VOLUME"))
library(Rblpapi)
install.packages("Rblpapi")
library(Rblpapi)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi")
library(Rblpapi)
Sys.getenv('JAVA')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre')
library(Rblpapi)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
update.packages()
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
detach("package:Rblpapi", unload=TRUE)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi")
remove.packages("Rblpapi")
install.packages("Rblpapi")
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi", dependencies = T)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
4.4 - 12.6 + 31.6 - 65.6
8.2*8
myfit = rpart(Y~., data = mydata)
library(recommenderlab)
library(Matrix)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
head(test)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
as(Rmat, 'matrix')[,]
a <- as(Rmat, 'matrix')[,]
a <- as.data.frame(a)
View(a)
is.na(a)
all(is.na(a))
which(rowSums(is.na(a))==ncol(a))
View(a)
names = colnames(as(user_input_Mat, 'matrix'))
df <- data.frame()
for (k in names) df[[k]] <- as.character()
namesss = colnames(as(user_input_Mat, 'matrix'))
namesss = colnames(as(user_input_Mat, 'matrix')[,])
namesss = colnames(as.dataframe(as(user_input_Mat, 'matrix')[,]))
a <- as(user_input_Mat, 'matrix')[,]
user_input_Mat = Rmat[1]
a <-  paste0('m', train$MovieID)
df <- data.frame()
for (k in names) df[[k]] <- as.character()
for (k in a) df[[k]] <- as.character()
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
user_input
data <- train
View(data)
rownames(data) = NA
rownames(data) = NULL
rep(6041,10)
user_input = data.frame(
UserID = rep(6041,14)
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
user_input = data.frame(
UserID = rep(6041,14),
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
View(user_input)
rownames(data) = NULL
rbind(data,user_input)
data <- rbind(data,user_input)
i = paste0('u', data$UserID)
j = paste0('m', data$MovieID)
x = data$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat_user = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat_user) = levels(tmp$i)
colnames(Rmat_user) = levels(tmp$j)
Rmat_user = new('realRatingMatrix', data = Rmat_user)
Rmat_user
as(Rmat_user, 'matrix')[,]
a <- as(Rmat_user, 'matrix')[,]
View(a)
str(a)
a[6041,]
a <- a[6041,]
a[!is.na(a)]
a <- as(Rmat_user, 'matrix')[,]
a <- a[6041,]
rownames(a)
as(Rmat_user, 'matrix')[,]
a <- as(Rmat_user, 'matrix')[,]
View(a)
a["u6041",]
a <- a["u6041",]
a[!is.na(a)]
a <- a["u6041",]
a <- as(Rmat_user, 'matrix')[,]
a <- a["u6041",]
a
a <- Rmat_user["u6041",]
a
# predicting....
recom = predict(rec_UBCF, a, type = 'ratings')
# Sorting the result by top ratings, picking top n results
result = as(recom, 'matrix')[,]
result
result[!is.na(result)]
result
result[!is.na(result)]
result <- result[!is.na(result)]
result
sort(result)
sort(result,decreasing = T)
result <- sort(result,decreasing = T)[10]
result
# Sorting the result by top ratings, picking top n results
result = as(recom, 'matrix')[,]
result <- result[!is.na(result)]
result <- sort(result,decreasing = T)[1:10]
result
result
c(result)
result
as.vector(result)
View(movies)
rownames(result)
colnames(result)
names(result)
library(stringr)
sub_str(names(result),2)
str_sub(names(result),2)
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
data.frame(
UserID = rep(6041,14),
user_input
)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
setwd("~/Desktop/UIUC-MCS/CS 598 PSL/Project 4/MovieLensRecommender/App")
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
nrow(user_ratings)
nrow(a)
nrow(movies)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
runApp()
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
View(movies)
movies[movies$MovieID %in% c(10,11)]
movies[movies$MovieID %in% c(10,11),2]
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
user_results = (1:10)/10
user_predicted_ids = 1:10
recom_results <- data.table(Rank = 1:10,
MovieID = movies$MovieID[user_predicted_ids],
Title = movies$Title[user_predicted_ids],
Predicted_rating =  user_results)
recom_results
recom_result$MovieID[0]
recom_results$MovieID[0]
recom_results$MovieID[1]
movies$image_url[1]
movies$image_url[3456]
View(movies)
1:nrow(movies)
movies$MovieID <- 1:nrow(movies)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
movies$image_url[movies$image_url]
movies$image_url[3456]
movies$Title[3456]
movies[movies$MovieID == user_predicted_ids,2]
movies[movies$MovieID == c(3456,2763),2]
movies[movies$MovieID == c(3456,2763)]
result
movies[movies$MovieID %in% c(10,2,3,1)]
movies[movies$MovieID %in% c(10,2,3,1),]
movies[match(c(10,2,3,1), movies$MovieID), ]
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
movies$image_url[1412]
movies[1412,]
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
movies$Title[910]
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
runApp()
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
View(movies)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
shinyApp(ui = ui, server = server_f)
library(rsconnect)
deployApp(appName = "Movie_recommendation")
