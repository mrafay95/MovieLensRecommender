shiny::runApp('Downloads')
install.packages("XLConnect")
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
if (!require("pacman")) install.packages("pacman")
msg.out <- capture.output( suppressMessages( library(pacman) ) )
if (p_isinstalled("shiny") == FALSE) install.packages("shiny")
if (p_isinstalled("XLConnect") == F)install.packages("XLConnect")
library(shiny)
library(XLConnect)
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
mt_cars
mtcars
mtcars %>% group_by(mpg) %>% count(cyl)
library(dplyr)
install.packages("dplyr")
mtcars %>% group_by(mpg) %>% count(cyl)
library(dplyr)
mtcars %>% group_by(mpg) %>% count(cyl)
mtcars %>% group_by(mpg) %>% count(cyl)
mtcars %>% group_by(mpg)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
mtcars
mtcars %>% group_by(mpg)
library(zeallot)
install.packages("zeallot")
library(zeallot)
mtcars %>% group_by(mpg)
mtcars %>% group_by(mpg)
mtcars %>% group_by(cyl)
install.packages(c("dplyr", "tidyselect"))
mtcars %>% group_by(cyl)
library(dplyr)
mtcars %>% group_by(cyl)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
View(df)
mtcars %>% group_by(cyl)
library(dplyr)
mtcars %>% group_by(cyl)
install.packages("dplyr")
library(dplyr)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
install.packages("backports")
library(backports)
mtcars %>% group_by(mpg)
install.packages("backports")
library(backports)
mtcars %>% group_by(mpg)
install.packages("broom")
install.packages("broom")
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
R.version.string
updateR()
installr: install.packages("installr")
install.packages("installr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
mtcars %>% group_by(mpg)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
install.packages("bdh")
library(pdh)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
library(bdh)
install.packages("Rblpapi")
library(Rblpapi)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
install.packages("Rblapi")
library(Rblpapi)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
??bdh
bdp(c("ESA Index", "SPY US Equity"), c("PX_LAST", "VOLUME"))
library(Rblpapi)
install.packages("Rblpapi")
library(Rblpapi)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi")
library(Rblpapi)
Sys.getenv('JAVA')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre')
library(Rblpapi)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
update.packages()
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
detach("package:Rblpapi", unload=TRUE)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi")
remove.packages("Rblpapi")
install.packages("Rblpapi")
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi", dependencies = T)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
4.4 - 12.6 + 31.6 - 65.6
8.2*8
myfit = rpart(Y~., data = mydata)
setwd("~/Desktop/UIUC-MCS/CS 598 PSL/Project 4/MovieLensRecommender/App")
library(shiny)
# See above for the definitions of ui and server
ui <- source('ui.R')
server <- source('server.R')
library(rsconnect)
rsconnect::deployApp()
rsconnect::deployApp(appname = "Movie Recommendation")
rsconnect::deployApp(appName = "Movie Recommendation")
rsconnect::deployApp(appName = "Movie-Recommendation")
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
user_input
user_input_Mat = Rmat[1]
user_input_Mat[1,] = NA   #Not sure whether NA is updated in this matrix
user_input_Mat
for (i in 1:dim(user_input)[1]) {
user_input_Mat[1,paste(c('m', user_input[i,1]), collapse = "")]  = user_input[i,2]
}
# predicting....
recom = predict(rec_UBCF, user_input_Mat, type = 'ratings')
# Sorting the result by top ratings, picking top n results
result = as(recom, 'matrix')[,]
result
!is.na(result)
result[!is.na(result)]
# Sorting the result by top ratings, picking top n results
result = as(recom, 'matrix')[,]
result
library(recommenderlab)
library(Matrix)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
myurl = "https://liangfgithub.github.io/MovieData/"
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
small_image_url = "https://liangfgithub.github.io/MovieImages/"
movies$image_url = sapply(movies$MovieID,
function(x) paste0(small_image_url, x, '.jpg?raw=true'))
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
head(test)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
user_input_Mat = Rmat[1]
user_input_Mat[1,] = NA   #Not sure whether NA is updated in this matrix
for (i in 1:dim(user_input)[1]) {
user_input_Mat[1,paste(c('m', user_input[i,1]), collapse = "")]  = user_input[i,2]
}
# predicting....
recom = predict(rec_UBCF, user_input_Mat, type = 'ratings')
# Sorting the result by top ratings, picking top n results
result = as(recom, 'matrix')[,]
result[!is.na(result)]
user_input_Mat
user_input_Mat[1,]
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
user_input_Mat = Rmat[1]
user_input_Mat
Rmat
user_input_Mat = Rmat[1]
as(user_input_Mat,'matrix')
user_input_Mat[1,] = NA   #Not sure whether NA is updated in this matrix
as(user_input_Mat,'matrix')
as(user_input_Mat,'matrix')[,]
user_input_Mat = Rmat[1]
as(user_input_Mat,'matrix')[,]
user_input_Mat = Rmat[1]
user_input_Mat[1,] = NA   #Not sure whether NA is updated in this matrix
as(user_input_Mat,'matrix')[,]
is.na(user_input_Mat[1,])
as(is.na(user_input_Mat[1,]),'matrix')[,]
user_input_Mat = Rmat[1]
as(is.na(user_input_Mat[1,]),'matrix')[,]
as(user_input_Mat,'matrix')[,]
a <- as(user_input_Mat,'matrix')[,]
a
a[!is.na(a)]
i = paste0('u', train$UserID)
i
j = paste0('m', train$MovieID)
j
x = train$Rating
x
user_input_Mat = Rmat[1]
a = as(user_input_Mat, 'matrix')[,]
a
a <- as.data.frame(a)
View(a)
Rmat
a
colnames(a)
rownames(a)
i = NA
j = rownames(a)
x = NA
tmp = data.frame(i, j, x, stringsAsFactors = T)
user_input_Mat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(user_input_Mat) = levels(tmp$i)
colnames(user_input_Mat) = levels(tmp$j)
user_input_Mat = new('realRatingMatrix', data = user_input_Mat)
user_input = data.frame(
MovieID = c(9,3,2,12,15,5,6,1,13,4,8,11,10,7),
Rating = c(4,3,2,5,5,3,5,1,5,2,3,5,5,2)
)
user_input_Mat = Rmat[1]
a = as(user_input_Mat, 'matrix')[,]
a <- as.data.frame(a)
View(a)
a <- as.data.frame(a)
i = "u9999999999999"
j = rownames(a)
x = NA
tmp = data.frame(i, j, x, stringsAsFactors = T)
user_input_Mat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(user_input_Mat) = levels(tmp$i)
colnames(user_input_Mat) = levels(tmp$j)
user_input_Mat = new('realRatingMatrix', data = user_input_Mat)
user_input_Mat
user_input_Mat = new('realRatingMatrix', data = user_input_Mat)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
a <- as.data.frame(a)
i = "u9999999999999"
j = rownames(a)
x = NA
tmp = data.frame(i, j, x, stringsAsFactors = T)
user_input_Mat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
rownames(user_input_Mat) = levels(tmp$i)
colnames(user_input_Mat) = levels(tmp$j)
rownames(user_input_Mat)
user_input_Mat
user_input_Mat = new('realRatingMatrix', data = user_input_Mat)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
View(tmp)
user_input_Mat = Rmat[1]
user_input_Mat
as(user_input_Mat, 'matrix')[,]
dim(user_input)
dim(user_input)[1]
paste(c('m', user_input[i,1]), collapse = "")]
paste(c('m', user_input[i,1]), collapse = "")
i=1
i=1
i
user_input[i,2]
View(train)
as(Rmat, 'matrix')[,]
