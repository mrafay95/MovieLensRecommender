shiny::runApp('Downloads')
install.packages("XLConnect")
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
if (!require("pacman")) install.packages("pacman")
msg.out <- capture.output( suppressMessages( library(pacman) ) )
if (p_isinstalled("shiny") == FALSE) install.packages("shiny")
if (p_isinstalled("XLConnect") == F)install.packages("XLConnect")
library(shiny)
library(XLConnect)
runApp('Downloads')
runApp('Downloads')
runApp('Downloads')
mt_cars
mtcars
mtcars %>% group_by(mpg) %>% count(cyl)
library(dplyr)
install.packages("dplyr")
mtcars %>% group_by(mpg) %>% count(cyl)
library(dplyr)
mtcars %>% group_by(mpg) %>% count(cyl)
mtcars %>% group_by(mpg) %>% count(cyl)
mtcars %>% group_by(mpg)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
mtcars
mtcars %>% group_by(mpg)
library(zeallot)
install.packages("zeallot")
library(zeallot)
mtcars %>% group_by(mpg)
mtcars %>% group_by(mpg)
mtcars %>% group_by(cyl)
install.packages(c("dplyr", "tidyselect"))
mtcars %>% group_by(cyl)
library(dplyr)
mtcars %>% group_by(cyl)
df <- data.frame(x = c(NA, "a.b", "a.d", "b.c"))
View(df)
mtcars %>% group_by(cyl)
library(dplyr)
mtcars %>% group_by(cyl)
install.packages("dplyr")
library(dplyr)
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
install.packages("backports")
library(backports)
mtcars %>% group_by(mpg)
install.packages("backports")
library(backports)
mtcars %>% group_by(mpg)
install.packages("broom")
install.packages("broom")
mtcars %>% group_by(mpg)
library(dplyr)
mtcars %>% group_by(mpg)
R.version.string
updateR()
installr: install.packages("installr")
install.packages("installr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
mtcars %>% group_by(mpg)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
install.packages("bdh")
library(pdh)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
library(bdh)
install.packages("Rblpapi")
library(Rblpapi)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
install.packages("Rblapi")
library(Rblpapi)
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
??bdh
bdp(c("ESA Index", "SPY US Equity"), c("PX_LAST", "VOLUME"))
library(Rblpapi)
install.packages("Rblpapi")
library(Rblpapi)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi")
library(Rblpapi)
Sys.getenv('JAVA')
Sys.setenv(JAVA_HOME='/Library/Java/JavaVirtualMachines/jdk1.8.0_91.jdk/Contents/Home/jre')
library(Rblpapi)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
update.packages()
bdh("SPY US Equity", c("PX_LAST", "VOLUME"), start.date=Sys.Date()-31)
detach("package:Rblpapi", unload=TRUE)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi")
remove.packages("Rblpapi")
install.packages("Rblpapi")
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
install.packages("Rblpapi", dependencies = T)
library("Rblpapi", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("Rblpapi")
4.4 - 12.6 + 31.6 - 65.6
8.2*8
myfit = rpart(Y~., data = mydata)
setwd("~/Desktop/UIUC-MCS/CS 598 PSL/Project 4/MovieLensRecommender")
library(recommenderlab)
library(Matrix)
library(recommenderlab)
install.packages("recommenderlab")
library(recommenderlab)
library(recommenderlab)
library(Matrix)
myurl = "https://liangfgithub.github.io/MovieData/"
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
View(ratings)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
ratings$Timestamp = NULL
set.seed(100)
train.id = sample(nrow(ratings), floor(nrow(ratings)) * 0.8)
train = ratings[train.id, ]
head(train)
test = ratings[-train.id, ]
head(test)
i = paste0('u', train$UserID)
j = paste0('m', train$MovieID)
i
j
x = train$Rating
tmp = data.frame(i, j, x, stringsAsFactors = T)
View(tmp)
Rmat = sparseMatrix(as.integer(tmp$i), as.integer(tmp$j), x = tmp$x)
View(Rmat)
rownames(Rmat) = levels(tmp$i)
colnames(Rmat) = levels(tmp$j)
Rmat = new('realRatingMatrix', data = Rmat)
View(Rmat)
View(Rmat)
Rmat
Rmat[1]
Rmat[[1]]
range(train$MovieID)
length(unique(train$MovieID))
range(train$UserID)
length(unique(train$UserID))
dim(Rmat)
rec_UBCF = Recommender(Rmat, method = 'UBCF',
parameter = list(normalize = 'Z-score',
method = 'Cosine',
nn = 25))
#Summary of model parameters
rec_UBCF@model
rec_UBCF@model
# predict ratings for the first three users
recom = predict(rec_UBCF,
Rmat[1:3], type = 'ratings')
recom
as(recom, 'matrix')[, 1:10]
as(Rmat, 'matrix')[1:3, 1:10]
recommenderRegistry$get_entry_names()
e <- evaluationScheme(Rmat, method="split", train=0.9, given=10, goodRating=3)
ubcf <- Recommender(getData(e, "train"), "UBCF")
ibcf <- Recommender(getData(e, "train"), "IBCF")
e <- evaluationScheme(Rmat, method="split", train=0.9, given=10, goodRating=3)
ubcf <- Recommender(getData(e, "train"), "UBCF")
e <- evaluationScheme(Rmat, method="split", train=0.9, given=10, goodRating=3)
givwn
given
e <- evaluationScheme(Rmat, method="split", train=0.9, given=10, goodRating=3)
ubcf <- Recommender(getData(e, "train"), "UBCF")
ibcf <- Recommender(getData(e, "train"), "IBCF")
scheme <- evaluationScheme(Rmat, method="split", train = .9, k=10, given=-5, goodRating=5)
algorithms <- list(
"user-based CF" = list(name="UBCF", param=list(nn=50)),
"item-based CF" = list(name="IBCF", param=list(k=50)),
)
algorithms <- list(
"user-based CF" = list(name="UBCF", param=list(nn=50)),
"item-based CF" = list(name="IBCF", param=list(k=50))
)
results <- evaluate(scheme, algorithms, type = "topNList", n=c(1, 3, 5, 10, 15, 20))
scheme <- evaluationScheme(Rmat, method="split", train = .9, k=10, given=-5, goodRating=3)
algorithms <- list("user-based CF" = list(name="UBCF", param=list(nn=50)),  "item-based CF" = list(name="IBCF", param=list(k=50)))
results <- evaluate(scheme, algorithms, type = "topNList", n=c(1, 3, 5, 10, 15, 20))
